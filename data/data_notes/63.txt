emerging programming paradigms
assignment
shradha khapra  uco
q write short notes on following






lean development
extreme programming xp
adaptive software development asd
feature driven development
scrum

ans 
lean development
lean development is the application of lean principles to software development lean
principles were initially developed as a way to optimize the production line to
minimize waste and maximize value to the customer primarily lean development is
based on  principles
 waste elimination  waste is defined as anything that is capable of reducing
code quality hindering time and effort or reducing delivered business value
the examples of such waste are unnecessary code or functionality
programming delays unclear requirements and insufficient testing lean
development focuses on eliminating these factors
 amplifying knowledge  lean development also focuses on learning required
technologies and gaining understanding about what the user really requires
 delaying commitment or late decision making  lean development requires
ample delay in finalizing decisions as it leaves for minimal space for changes at
the end hence reducing cost of changes

 delivering fast  iterative development is utilized to deliver new applications
or enhancements as quickly as possible
eg  engineers using lean development came up with the concept of mvp
minimum viable product this approach aids to enhance a software
incrementally and on the basis of the feedback provided by end users and
discards parts of no value
 team empowerment  lean software development is a system that is directly
aimed at empowering members of the team an approach of such type is
necessary to keep the developers motivated and contributes to a faster
application of changes to software products that are needed to reflect the
changes in the environment
 builtin integrity a builtin integrity is also a guiding principle in lean
development methodology as various issues in this area lead to waste of
different types repetitive testing of the code mistakes in logging and
resolving them tends to take time and thus can potentially increase cost of
development therefore lean addresses such nuances before they can even take
place
 view application as a whole  lean software development opposes breaking
application into components and stands for focusing on value stream as a
whole this helps in ensuring that there arent disruptions or
miscommunications which can surely occur if members were divided across
various subteams
thus it can be said that lean principles do allow optimization of the teams workflow
and creation of a sense of unity among everyone involved in the project this shared
responsibility leads to translation of work into higher performance

extreme programming xp
extreme programming xp is a lightweight efficient lowrisk flexible predictable
and scientific way to develop a software extreme programming xp was initiated

and developed to address the targeted needs of development of software by small
teams these teams may have requirements that are vague and changing
extreme programming is a form of the agile software development methodologies
xp provides principles that help guide the behavior of the team the team is expected
to selforganize xps core values have following properties 
 each practice is simple and selfcomplete
 it is a combination of practices that produces more complex and emergent
behavior
a key assumption of extreme programming is that the cost of changing a program
can be held mostly constant over time
this can be achieved with 








emphasis on continuous feedback from the customer
short iterations
design and redesign
coding and testing frequently
eliminating defects early thus reducing costs
keeping the customer involved throughout the development
delivering working product to the customer

extreme programming involves 
 writing unit tests before programming and keeping all of the tests running at all
times the unit tests are automated and eliminate defects early thus reducing
the costs
 starting with a simple design just enough to code the features at hand and
redesigning when required
 programming in pairs called pair programming with two programmers at one
screen taking turns to use the keyboard while one of them is at the keyboard
the other constantly reviews and provides inputs
 integrating and testing the whole system several times a day
 putting a minimal working system into the production quickly and upgrading it
whenever required
 keeping the customer involved all the time and obtaining constant feedback

iterating facilitates the accommodating changes as the software evolves with the
changing requirements


adaptive software development asd
adaptive software development is a method to build complex software and system
asd focuses on human collaboration and selforganisation adaptive software
development is cyclical like the evolutionary model with the phase names reflecting
the unpredictability in the complex systems the phases in the adaptive development
life cycle are 
 speculate
the term plan is too deterministic and indicates a reasonably high degree of
certainty about the desired result the implicit and explicit goal of
conformance to plan restricts the managers ability to steer the project in
innovative directions
in adaptive software development the term plan is replaced by the term
speculate while speculating the team does not abandon planning but it
acknowledges the reality of uncertainty in complex problems speculate
encourages exploration and experimentation iterations with short cycles are
encouraged
 collaborate
complex applications are not built they evolve complex applications require
that a large volume of information be collected analyzed and applied to the
problem turbulent environments have high rates of information flow hence
complex applications require that a large volume of information be collected
analyzed and applied to the problem this results in diverse knowledge
requirements that can only be handled by team collaboration

collaboration would require the ability to work jointly to produce results
share knowledge or make decisions
in the context of project management collaboration portrays a balance
between managing with traditional management techniques and creating and
maintaining the collaborative environment needed for emergence
 learn
the learn part of the lifecycle is vital for the success of the project team has
to enhance their knowledge constantly using practices such as 
 technical reviews
 project retrospectives
 customer focus groups
reviews should be done after each iteration both the developers and
customers examine their assumptions and use the results of each development
cycle to learn the direction of the next the team learns 
 about product changes
 more fundamental changes in underlying assumptions about how the
products are being developed
the iterations need to be short so that the team can learn from small rather
than large mistakes

these three phases reflect the dynamic nature of adaptive software development
the adaptive development explicitly replaces determinism with emergence it goes
beyond a mere change in lifecycle to a deeper change in management style adaptive
software development has a dynamic speculatecollaboratelearn lifecycle
the adaptive software development lifecycle focuses on results not tasks and the
results are identified as application features


feature driven development

featuredriven development fdd is a clientcentric architecturecentric and
pragmatic software process features are an important aspect of fdd a feature is a
small clientvalues function such as  calculating the total sales validating the user
password or authorizing the sales transaction of a customer
typically used in largescale development projects five basic activities exist during
fdd

 develop overall model

the client and the development team make an overall model detailed domain
models are created and then these models are progressively merged into the
overall model guided by a chief architect team members get a good
understanding of the complete model
 build a features list
information gathered in the st step is now deduced to make a list of required
features a feature is a small client valued output the whole project is thus
divided into features a feature needs to be delivered every two weeks
therefore the feature the team decides to work on must take less than two
weeks to be implemented
 plan by feature
now the development of features is planned it is all about in which order the
features will be implemented teams are selected and assigned feature sets

 design by feature
the chief programmer chooses the features and the domain classes that will be
involved in designing the feature sequence diagrams are drawn general
designs of the features are also finalized class and method prologues are
written it is all followed by a design inspection
 build by feature
after the design inspection the domain expert explains the specifics class
owners start building and implementing all the items necessary to support the
design code is developed unit tested and inspected and approved by the chief
programmer who then gives an ok and the completed feature is added to the
main build


scrum
scrum is an agile project management methodology or framework used primarily for
software development projects with the goal of delivering new software capability
every  weeks although developed for agile software development agile scrum
became the preferred framework for agile project management in general and is
sometimes simply referred to as scrum project management or scrum development
the components of agile scrum management team are

 the product owner  the product owner is the projects key stakeholder usually an internal or external customer or a spokesperson for the customer
 the scrummaster  the scrummaster is the servant leader to the product
owner development team and organization with no hierarchical authority
over the team but rather more of a facilitator the scrummaster ensures that the
team adheres to scrum theory practices and rules
 the development team  the development team is a selforganizing
crossfunctional group armed with all of the skills to deliver shippable
increments at the completion of each sprint
a sprint in scrum is a timeboxed period during which specific work is completed and
made ready for review sprints are usually  weeks long but can be as short as one
week
three pillars uphold every implementation of empirical process control transparency
inspection and adaptation
 transparency
 inspection
 adaptation

