write short notes on the following  

                                                             rahul meena
       uco

a scrum
scrum is the type of agile framework it is a framework within which people can address complex adaptive problems while productivity and creativity of delivering product is at highest possible values scrum uses iterative process
life cycle of scrum proceeds as follows  
 a scrum team is formed it usually consists of  peopleeveryone on the project works together to complete the set of work they have collectively committed to complete within a sprint
 product owner the product owner is often someone from product management or marketing a key stakeholder or a key user
 scrum master the scrum master is responsible for making sure the team is as productive as possible the scrum master does this by helping the team use the scrum process by removing impediments to progress by protecting the team from outside and so on
 product backlog according to the prioritize features the product is organized
 sprint planning meeting at the start of each sprint a sprint planning meeting is held during which the product owner presents the top items on the product backlog to the team the scrum team selects the work they can complete during the coming sprint that work is then moved from the product backlog to a sprint backlog 
 daily scrum each day during the sprint a brief meeting called the daily scrum is conducted this meeting helps set the context for each days work and helps the team stay on track
 sprint review meeting if the product still has some nonachievable features then it will be checked in this stage and then the product is passed to the sprint retrospective stage
 sprint retrospective in this stage quality or status of the product is checked
 sprint a sprint is a timebox of one month or less a new sprint starts immediately after the completion of the previous sprint

b lean development
lean software development lsd is an agile framework based on optimizing development time and resources eliminating waste and ultimately delivering only what the product needs
the seven lean principles are

       eliminate waste  one of the key elements of practicing lean is to eliminate anything that does not add value to the customer
      
       build quality in
       
       create knowledge  this principle encourages lean teams to provide the infrastructure to properly document and retain valuable learning this can be done by using pair programming code reviews training documentation etc
      
       defer commitment  this lean principle encourages team to demonstrate responsibility by keeping their options open and continuously collecting information rather than making decisions without the necessary data
      
       deliver fast 
      
       respect people  the lean principle of respect for people is often one of the most neglected especially in the fastpaced burnoutridden world of software development it applies to every aspect of the way lean teams operate from how they communicate handle conflict hire and onboard new team members deal with process improvement and more
      
       optimize the whole  optimizing the whole is a lean development principle that encourages lean organizations to eliminate these sorts of vicious cycles by operating with a better understanding of capacity and the downstream impact of work



c extreme programming xp
extreme programming xp is one of the most important software development frameworks of agile models it is used to improve software quality and responsive to customer requirements the extreme programming model recommends taking the best practices that have worked well in the past in program development projects to extreme levelsa few of the basic steps followed in software development using xp are mentioned below  


coding the concept of coding which is used in xp model is slightly different from traditional coding here coding activity includes drawing diagrams modeling that will be transformed into code scripting a webbased system and choosing among several alternative solutions



testing xp model gives high importance on testing and considers it the primary factor to develop a faultfree software



listening the developers need to carefully listen to the customers if they have to develop a good quality software sometimes programmers may not have the depth knowledge of the system to be developed so it is desirable for the programmers to understand the functionality of the system properly and they have to listen to the customers



designing without a proper design a system implementation becomes too complex and very difficult to understand the solution thus it makes maintenance expensive a good design results in the elimination of complex dependencies within a system so effective use of suitable design is emphasized



feedback one of the most important aspects of the xp model is to gain feedback to understand the exact customer needs frequent contact with the customer makes the development effective



simplicity the main principle of the xp model is to develop a simple system that will work efficiently in the present time rather than trying to build something that would take time and it may never be used it focuses on some specific features that are immediately needed rather than engaging time and effort on speculations of future requirements







d adaptive software development asd



asd was created to replace traditional waterfall variants in a general sense asd processes represent a repeating series of speculate collaborate and learn cycles

speculate refers to the planning paradox  outcomes are unpredictable therefore endless suppositions on a products look and feel are not likely to lead to any business value some important dimensions are more than likely wrong hypothesize a rough idea of what you need and plan to adapt the big idea behind speculate is when we plan a product to its smallest detail as in a requirements up front waterfall variant we produce the product we intend and not the product the customer needs
collaboration portrays a balance between managing the doing and creating and maintaining the collaborative environment speculation says we cant predict outcomes if we cant predict outcomes we cant plan if we cant plan traditional project management theory suffers collaboration counterpoises speculation in that a project manager plans the work between the predictable parts of the environment and adapts to the uncertainties of various factors  stakeholders requirements software vendors technology etc
learning cycles challenge all stakeholders and project team members based on short iterations of design build and testing knowledge accumulates from the small mistakes we make due to false assumptions poorly stated or ambiguous requirements or misunderstanding the stakeholders needs correcting those mistakes through shared learning cycles leads to greater positive experience and eventual mastery of the problem domain
e feature driven development
an agile methodology for developing software featuredriven development fdd is customercentric iterative and incremental with the goal of delivering tangible software results often and efficiently fdd in agile encourages status reporting at all levels which helps to track progress and results
as with all agile methodologies the first step in fdd is to gain an accurate understanding of content and context of the project and to develop a clear shared understanding of the target audience and their needs
    develop an overall model
this stage is when the outline is drafted using the primary goal as a guide the team will develop detailed domain models which will then be merged into one overall model that acts as a rough outline of the system as it develops and as the team learns details will be added
    build a features list
use the information assembled in the first step to create a list of the required featuresmake a list of features that can be completed in two weeks time and keep in mind that these features should be purposes or smaller goals rather than tasks
 plan by feature
analyze the complexity of each feature and plan tasks that are related for team members to accomplish during the planning stage all members of the team should take part in the evaluation of features with the perspective of each development stage in mind then use the assessment of complexity to determine the order in which each feature will be implemented as well as the team members that will be assigned to each feature setthis stage should also identify class owners individual developers who are assigned to classes
 design by feature
a chief programmer will determine the feature that will be designed and built he or she will also determine the class owners and feature teams involved while defining the feature priorities part of the group might be working on technical design while others work on framework by the end of the design stage a design review is completed by the whole team before moving forward
 build by feature
this step implements all the necessary items that will support the design here user interfaces are built as are components detailed in the technical design and a feature prototype is created the unit is tested inspected and approved then the completed feature can be promoted to the main build
 conclusion
featuredriven development is a practical agile approach suited for longterm complex projects it is a suitable choice for development teams seeking a simple but structured agile method that is scalable and delivers predictable results



