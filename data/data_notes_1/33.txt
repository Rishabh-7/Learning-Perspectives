write short notes on following
lakshay dabas
uco


scrum
scrum is a framework for project management that emphasises teamwork accountability
and iterative progress toward a welldefined goal the framework begins with a simple
premise start with what can be seen or known after that track the progress and tweak as
necessary the three pillars of scrum are transparency inspection and adaptation
the framework which is often part of agile software development is named for a rugby
formation everyone plays a role when it comes to product development scrum roles
include product owner scrum master and scrum development team
product owner this team member serves as the liaison between the development team
and its customers the product owner is responsible for ensuring expectations for the
completed product have been communicated and agreed upon
scrum master this team member serves as a facilitator the scrum master is responsible
for ensuring that scrum best practices are carried out and the project is able to move
forward
scrum development team this is a group that works together for creating and testing
incremental releases of the final product
the scrum process
the scrum process encourages practitioners to work with what they have and continually
evaluate what is working and what is not working communication which is an important part
of the process is carried out through meetings called events scrum events include
daily scrum  the daily scrum is a short standup meeting that happens at the same place
and time each day at each meeting the team reviews work that was completed the previous
day and plans what work will be done in the next  hours this is the time for team
members to speak up about any problems that might prevent project completion
sprint planning meeting a sprint refers to the time frame in which work must be
completed and its often  days everyone participates in setting the goals and at the end
at least one increment  a usable piece of software  should be produced
sprint review this is the time to show off the increment
sprint retrospective a sprint retrospective is a meeting thats held after a sprint ends
during this meeting everyone reflects on the sprint process a teambuilding exercise may
also be offered an important goal of a sprint retrospective is continuous improvement

the scrum framework shows how the elements of scrum revolve around the scrum team

scrum artifacts
an artifact is something of historical interest that deserves to be looked at again in scrum
product development artifacts are used to see whats been done and what is still in the
queue scrum artifacts which include product backlog sprint backlog product increment
and burndown are useful to look at in sprint planning meetings
product backlog this refers to what remains on the to be done list during a product
backlog grooming session the development team works with the business owner to prioritize
work that has been backlogged the product backlog may be finetuned during a process
called backlog refinement
sprint backlog this is a list of tasks that must be completed before selected product
backlog items can be delivered these are divided into timebased user stories
product increment this refers to whats been accomplished during a sprint  all the
product backlog items  as well as whats been created during all previous sprints the
product increment reflects how much progress has been made
burndown the burndown is a visual representation of the amount of work that still needs
to be completed a burndown chart has a y axis work and an x axis time ideally the
chart illustrates a downward trend as the amount of work still left to do over tim



lean development
lean software development is a set of principles that can be applied to software
development to decrease programming effort budgeting and defect rates by one third the
principles were adapted from lean manufacturing by mary and tom poppendieck this
approach is beneficial to an organization because agile iterations eliminate extensive preplanned specifications user stories rather than large upfront specs are easily understood by
each team member and simpler to communicate
lean development makes it possible to gain information straight from the source therefore
eliminating the common problem of producing software that does not address the customers

needs short iterations provide an opportunity to communicate small sets of plans up front
and allow the team to make decisions in order to adapt to unforeseen circumstances
organizations that have the ability to complete fast simple improvements in the shortest time
frame gain powerful decisionmaking benefits

lean software development principles
lean development methodology principles can be applied in any it environment for improved
programming practices the practice is based on seven principles
 waste elimination
 amplifying learning
 late decision making
 fast delivery
 team empowerment
 builtin integrity
 view applications as a whole
waste is defined as anything that is capable of reducing code quality hindering time and
effort or reducing delivered business value it can be things such as unnecessary code or
functionality programming delays unclear requirements and insufficient testing lean
development focuses on eliminating these factors learning required technologies and
gaining understanding about what the user really needs
additionally by waiting until the last minute to make decisions the cost of change remains
much less iterative development is utilized to deliver new applications or enhancements as
quick as possible integrity is built into the software to ensure architecture and that system
components flow well together organizations incorporate lean development principles to
achieve continuous improvement as changes are rapidly implemented



extreme programming xp
extreme programming xp is one of the most important software development framework of
agile models it is used to improve software quality and responsive to customer
requirements the extreme programming model recommends taking the best practices that
have worked well in the past in program development projects to extreme levels
good practices needs to practiced extreme programming some of the good practices
that have been recognized in the extreme programming model and suggested to maximize
their use are given below
 code review code review detects and corrects errors efficiently it suggests pair
programming as coding and reviewing of written code carried out by a pair of
programmers who switch their works between them every hour
 testing testing code helps to remove errors and improves its reliability xp suggests
testdriven development tdd to continually write and execute test cases in the tdd
approach test cases are written even before any code is written
 incremental development incremental development is very good because customer
feedback is gained and based on this development team come up with new increments
every few days after each iteration
 simplicity simplicity makes it easier to develop good quality code as well as to test
and debug it
 design good quality design is important to develop a good quality software so
everybody should design daily
 integration testing it helps to identify bugs at the interfaces of different functionalities
extreme programming suggests that the developers should achieve continuous
integration by building and performing integration testing several times a day
basic principles of extreme programming xp is based on the frequent iteration through
which the developers implement user stories user stories are simple and informal
statements of the customer about the functionalities needed a user story is a conventional

description by the user about a feature of the required system it does not mention finer
details such as the different scenarios that can occur on the basis of user stories the
project team proposes metaphors metaphors are a common vision of how the system would
work the development team may decide to build a spike for some feature a spike is a very
simple program that is constructed to explore the suitability of a solution being proposed it
can be considered similar to a prototype some of the basic activities that are followed during
software development by using xp model are given below


coding the concept of coding which is used in xp model is slightly different from
traditional coding here coding activity includes drawing diagrams modeling that will
be transformed into code scripting a webbased system and choosing among several
alternative solutions



testing xp model gives high importance on testing and considers it be the primary
factor to develop a faultfree software



listening the developers needs to carefully listen to the customers if they have to
develop a good quality software sometimes programmers may not have the depth
knowledge of the system to be developed so it is desirable for the programmers to
understand properly the functionality of the system and they have to listen to the
customers



designing without a proper design a system implementation becomes too complex
and very difficult to understand the solution thus it makes maintenance expensive a
good design results elimination of complex dependencies within a system so effective
use of suitable design is emphasised



feedback one of the most important aspects of the xp model is to gain feedback to
understand the exact customer needs frequent contact with the customer makes the
development effective



simplicity the main principle of the xp model is to develop a simple system that will
work efficiently in present time rather than trying to build something that would take
time and it may never be used it focuses on some specific features that are
immediately needed rather than engaging time and effort on speculations of future
requirements

applications of extreme programming xp some of the projects that are suitable to
develop using xp model are given below





small projects xp model is very useful in small projects consisting of small teams as
face to face meeting is easier to achieve



projects involving new technology or research projects this type of projects face
changing of requirements rapidly and technical problems so xp model is used to
complete this type of projects

adaptive software development asd
adaptive software development is a method to build complex software and system asd
focuses on human collaboration and selforganisation asd life cycle incorporates three
phases namely
 speculation
 collaboration
 learning

these are explained as following below
 speculation
during this phase project is initiated and planning is conducted the project plan uses
project initiation information like project requirements user needs customer mission
statement etc to define set of release cycles that the project wants
 collaboration
it is the difficult part of asd as it needs the workers to be motivated it collaborates
communication and teamwork but emphasizes individualism as individual creativity plays a
major role in creative thinking people working together must trust each others to
 criticize without animosity
 assist without resentment
 work as hard as possible
 possession of skill set
 communicate problems to find effective solution
 learning
the workers may have a overestimate of their own understanding of the technology which
may not lead to the desired result learning helps the workers to increase their level of
understanding over the project
learning process is of  ways
 focus groups
 technical reviews
 project postmortem
asds overall emphasis on the dynamics of selforganising teams interpersonal
collaboration and individual and team learning yield software project teams that have a
much higher likelihood of success



feature driven development
it is an agile iterative and incremental model that focuses on progressing the features of the
developing software the main motive os featuredriven development is to provide timely
updated and working software to the client in fdd reporting and progress tracking is
necessary at all levels

fdd lifecycle






build overall model
build feature list
plan by feature
design by feature
build by feature

characteristics of fdd





short iterative fdd lifecycle works in simple and short iterations to eciently finish
the work on time and gives good pace for large projects
customer focused this agile practice is totally based on inspection of each feature
by client and then pushed to main build code
structured and feature focused initial activities in lifecycle builds the domain model
and features list in the beginning of timeline and more than  of eorts are given to
last  activities
frequent releases featuredriven development provides continuous releases of
features in the software and retaining continuous success of the project

advantages of fdd





reporting at all levels leads to easier progress tracking
fdd provides continuous success for larger size of teams and projects
reduction in risks is observed as whole model and design is build in smaller
segments
fdd provides greater accuracy in cost estimation of the project due to feature
segmentation

disadvantages of fdd




this agile practice is not good for smaller projects
there is high dependency on lead programmers designers and mentors
there is lack of documentation which can create an issue afterwards

