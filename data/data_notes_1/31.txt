epp
assignment
final
evaluation

mitul hirna
uco
coe

scrum
scrum is a framework used by companies to help teams work together scrum
encourages teams to learn dynamically through experiences taking onus of
organisations themselves and reflect on their wins and losses to continuously improve
scrum is often used due to its simple framework structure the rules artefacts events
and roles are easy to understand the self learning and functioning approach helps
remove ambiguities in the development process while giving sufficient space for
companies to introduce their individualities in the functioning
the clear demarcation of roles and planned events ensure that there is transparency
and collective ownership throughout the development cycle quick releases keep the
team motivated and the users and stakeholders happy as they can see the progress in a
short amount of time

scrum artefacts tools to solve a problem
 product backlog it is a to do list that is maintained by the product owner or
product manager the is a dynamic list of features requirements enhancements
and fixes that acts as the input for the sprint backlog this list is dynamic in
nature and keeps changing because the problem may not be relevant or solved
through other ways thus enhancing the utilisation of time
 sprint backlog t
 his is the list of items bug fixes and other reports that are
selected by the development team for implementation in the current sprint cycle

there is a sprint planning meeting and the team chooses which items it will work
on for the sprint from the product backlog there may be flexibility in the current
sprint but the fundamentals sprint goal  what the team wants to achieve from
the current sprint  cannot be compromised
 sprint goal  this is the usable end product from a sprint the duration of the
sprint varies and so does its nature the definition of these sprint is defined by
the team

scrum ceremonies or events
these are events and ceremonies that the team holds when following the scrum
framework these events and ceremonies are done to make checks and keep track of
progress and reevaluate the previous held sprints
the following key ceremonies a scrum team might partake in are
 organise the backlog this is the job of the product owner it involves steering
the project in the right vision and keeping in touch with the market need thus the
product owner keeps track of the product progress and has a constant pulse of
the market and the customer
 sprint planning this event is to decide on what objective the team has for the
next sprint  s
 pecific stories are used to align the team with the goal and are also
agreed upon by the scrum team to be feasible to implement during the sprint
at the end of the sprint planning session each member of the team needs to be
clear on what can be delivered in the sprint and how the increment can be
delivered
 sprint t
 his is the time during which the team comes together and works on the
objective the most common time for a sprint is usually two week the sprint
duration varies with each sprint session depending on the complexity of the
objective and the time available for development
 daily scrum stand up the goal of this meeting is to get the days objectives
and goals set this is usually a  min meeting that is used to address the team
to get a focussed  hour results
this usually involves answering three questions from each team member what
did i do yesterday  what do i plan to do today  are there any obstacles 

 sprint review at the end of the sprint the team gets together for an informal
session to view a demo or inspect the sprint goal the team is now open to
feedback and reviews for refining the product this is usually conducted by the
product manager
 sprint retrospective the retrospective is where the team comes together to
document and discuss what worked and what didnt work in a sprint a project
people or even ceremonies
there are three important roles for scrum success
product owner scrum master and the development team
 product owner they are the owner and the leader of the project closely partner
with the business and the team to ensure everyone understands the work items
in the product backlog they have control over the shipment of the product and
the final say in the product
 scrum master t
 he scrum masters are champions within the team and advise on
how to fine tune the several aspects of the project an effective scrum master
deeply understands the work being done by the team and can help the team
optimize their transparency and delivery flow the facilitate all team related
activities
 development team t
 he development team get the work done and are often
small enough to eat two pizzas the team consists of different members of
different skill set and they work with the scrum master and the product owner to
bring the project to life

lean development
lean software development is a translation of lean manufacturing principles and
practices to the software development domain primarily adapted from the
toyota production system it is emerging with the support of a prolean
subculture within the agile community
it offers a solid conceptual framework values and conceptual framework values
and principles as well as good practices derived from experience that support
agile organisations
the principles of lean development are
 eliminate waste with respect to software projects and other such
domains the waste include building the wrong feature or product
mismanaging the backlog rework unnecessarily complex solutions
extraneous cognitive load psychological distress waitingmultitasking
knowledge loss ineffective communication a system is deployed in order
to identify the waste called a value stream mapping
 amplifying learning due to the nature of software development the
measure of the software is by the fitness for use and not in conformance
of the requirement and so excess importance is placed on the exploration
of ideas than adding more documentation or detailed planning the code
written is immediately tested by running tests the learning cycles are
short and frequent with feedback sessions there is relevant customer
and developer feedback taken into account before beginning the next
short cycle
 decide as late as possible s
 ince software development is always
associated with some uncertainty better result are achieved with a set of
setbased or optionbased approach delaying decisions as much as
possible and predictions with the number of approaches and possible
solutions that can be discussed  this brainstorming produces the best
possible solutions this also helps in bringing about the best decision
regarding the crucial decisions the market demand is also carefully
analysed in this
 deliver as fast possible i n software development the fastest and the
software that is in the market is the one that survives and not necessarily
the best one keeping this in mind the team release the updates as soon

as possible and get customer and developer feedback and the changes
are incorporated in the stand up meeting and the next sprint
 empower the team s
 oftware development is more than just mental grind
it requires a higher purpose and high motivation to produce appreciable
results this is why it is essential to support and empower the team of
developers this is a turnaround where the manager is taught and learns
how the work is done so as to better facilitate the team and better manage
and in the bigger picture bring better results
 build integrity in t
 he product or the system must be an overall
experience for the customer that is how integrity is perceived as more
features are added to the original code base the harder it becomes to add
further improvements the verified system is how integrity is perceived
and which is a priority for the customer
 optimize the whole t
 he modern software system are not simply the sum
of their parts but also the product of their interactions defects in
software tend to accumulate during the production of the code due to the
integration of the code the part is made to be highly optimised the entire
system should be made a priority when it comes to the optimisation of the
system as compared to a part

extreme programming
extreme programming is a type of agile software development methodology which is
intended to improve software quality and responsiveness to changing customer
requirements it focuses on having fast releases which is intended to increase
productivity and introduce checkpoints at which new customer requirements can be
adopted
 goals xp attempts to reduce the cost of changes in requirements by having
multiple short development cycles instead of long cycles the changes during
these cycles are inescapable and hence are planned for and this contributes to
the original goal of xp of increasing productivity
 activities xp consists of four basic activities that are performed within the
software development process coding testing listening and designing they are
as follows
 coding coding is the language that is spoken in an xp environment the
most efficient form considered is code the developers can best
communicate in code they give feedback by writing and editing code
 testing testing is essential in the world of xp more the testing more
flaws can be solved xp utilises unit tests and acceptance tests with
systemwide integration testing being encouraged system wide testing
varies as per schedules and stability
 listening listening is essential and better communication must be
established with the customer regarding the technical aspects of the
problem will be solved this is called planning game
 designing s
 ystem designs are continuously tested and redesigned to
remove dependencies and keep the system as independent as possible
 values xp runs on five values which are as follows
 communication formal software development requires a lot of
communication and institutional communication is broken down in xp
this is replaced by verbal communication and feedback
 simplicity t
 he simplest solutions are pushed forward in extreme
programming
 feedback feedback is essential in xp is quite essential and is often
observed in terms of customer feedback unit tests and team reviews

 courage c
 ourage is essential in teams that use xp so as to be confident
in the code produced as xp focuses on quick releases and thus is an
essential attribute to have
 respect p
 rogrammers should have respect for others and selfrespect
this is because they should honor each others work

adaptive software development
adaptive software development asd is a software development process that
embodies the principle that continuous adaptation of the process to the work at hand is
the normal state affairs
it is a development process that replaces the traditional waterfall cycle with a repeating
series of speculate collaborate and learn cycles
 speculate s
 peculation is essential in this case as planning can be too definitive
contrary to the philosophy of the development model
 collaborate d
 ue to the adaptive nature of the development model several
features are added at the current time and knowledge may not be with one team
hence collaboration is required
 learn the reviews feedbacks mistakes help the team to understand the market
and customer feedback this allows the team to understand the requirements
better
the characteristics of an asd life cycle are that it is mission focused feature based
iterative timeboxed risk driven and change tolerant
during the iterations of asd the knowledge gathered by making small mistakes based
on false assumptions and correcting those mistakes thus leading to greater experience
and eventually mastery in the problem domain

feature driven development
feature driven development is an agile framework that as its name suggests organises
software development around making progress on features features in the fdd
context are not necessarily product features in the commonly understood sense
the project life cycle has the following constituents
 develop an overall model developing a high level design and then through
detailed domain models are presented by small groups for peer reviews the
specifics once decided are proceeded with
 build a feature list this is a list of features that is obtained from the model
development and then functionally decomposing each domain into subject areas
which consist of features the features are not too long else are broken down
into smaller features
 plan by feature t
 he obtained feature set is planned down in the form of
development plan and the programmers are set to work
 design by feature a team leader selects the set of features that are to be
developed in a small period of time after the details are written down a design
inspection takes place
 build by feature c
 lass owners develop codes which are integrated into the main
system after they build pass all the unit and integration
feature completion is monitored by the completion of milestones each feature has
multiple milestones to be completed sequentially the first half is done in the design by
feature part and rest are completed in the latter part of the build by features

