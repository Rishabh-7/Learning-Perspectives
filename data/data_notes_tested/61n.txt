following lakshay dabas uco scrum scrum ,project management ,emphasises teamwork accountability ,iterative progress ,simple premise ,transparency inspection ,agile software development ,rugby formation ,product development scrum roles ,product owner scrum master ,scrum development team product owner ,team member ,development team ,product owner ,scrum master ,team member ,scrum master ,scrum development team ,incremental releases ,final product ,scrum process ,scrum process encourages practitioners ,important part ,events scrum events ,daily scrum ,short standup meeting ,team reviews work ,previous day ,team members ,project completion sprint planning meeting ,sprint refers ,time frame ,usable piece ,sprint review ,increment sprint retrospective ,sprint retrospective ,meeting thats ,sprint ends ,sprint process ,important goal ,sprint retrospective ,continuous improvement ,scrum framework shows ,scrum revolve ,scrum team scrum artifacts ,historical interest ,scrum product development artifacts ,queue scrum artifacts ,product backlog sprint backlog product increment ,sprint planning meetings product backlog ,product backlog ,development team ,business owner ,prioritize work ,product backlog ,backlog refinement sprint backlog ,product backlog items ,user stories product increment ,product backlog items ,previous sprints ,product increment reflects ,visual representation ,burndown chart ,y axis work ,x axis time ,chart illustrates ,downward trend ,lean development ,lean software development ,software development ,defect rates ,tom poppendieck ,agile iterations ,specifications user stories ,large upfront specs ,team member ,lean development ,common problem ,customers needs ,short iterations ,unforeseen circumstances organizations ,complete fast simple improvements ,shortest time frame gain ,lean software development principles ,lean development methodology principles ,principles waste elimination ,delivery team empowerment ,builtin integrity view applications ,whole waste ,code quality ,business value ,unnecessary code ,delays unclear requirements ,lean development focuses ,factors learning ,iterative development ,new applications ,possible integrity ,ensure architecture ,system components flow ,organizations incorporate ,lean development principles ,continuous improvement ,xp extreme ,important software development framework ,agile models ,software quality ,customer requirements ,program development projects ,extreme levels ,good practices needs ,good practices ,code review code review detects ,corrects errors ,suggests pair ,reliability xp suggests testdriven development tdd ,test cases ,tdd approach test cases ,incremental development incremental development ,customer feedback ,development team ,new increments ,iteration simplicity simplicity ,good quality code ,design good quality design ,good quality software ,identify bugs ,different functionalities extreme ,continuous integration ,basic principles ,frequent iteration ,user stories user stories ,informal statements ,user story ,conventional description ,finer details ,different scenarios ,user stories ,project team ,metaphors metaphors ,common vision ,development team ,simple program ,basic activities ,software development ,xp model ,xp model ,drawing diagrams ,alternative solutions ,xp model ,high importance ,primary factor ,faultfree software ,developers needs ,good quality software ,depth knowledge ,proper design ,system implementation ,good design results elimination ,complex dependencies ,effective use ,suitable design ,important aspects ,xp model ,exact customer ,frequent contact ,effective simplicity ,main principle ,xp model ,simple system ,present time ,specific features ,future requirements applications ,xp model ,small projects xp model ,small projects ,small teams ,new technology ,research projects ,technical problems ,xp model ,projects adaptive software development asd adaptive software development ,complex software ,system asd focuses ,human collaboration ,selforganisation asd life cycle incorporates ,speculation collaboration learning ,phase project ,project plan uses project initiation information ,project requirements user ,customer mission statement etc ,release cycles ,difficult part ,collaborates communication ,individual creativity ,major role ,resentment work ,possible possession ,communicate problems ,effective solution learning ,own understanding ,result learning ,project learning process ,ways focus groups ,technical reviews project postmortem asds overall emphasis ,teams interpersonal collaboration ,team learning yield software project teams ,agile iterative ,incremental model ,main motive os featuredriven development ,levels fdd lifecycle ,overall model ,list plan ,short iterative fdd lifecycle ,good pace ,large projects customer ,agile practice ,initial activities ,lifecycle builds ,domain model ,frequent releases featuredriven development ,continuous releases ,continuous success ,project advantages ,continuous success ,projects reduction ,whole model ,segments fdd ,cost estimation ,segmentation disadvantages ,agile practice ,high dependency ,lead programmers designers ,issue afterwards ,