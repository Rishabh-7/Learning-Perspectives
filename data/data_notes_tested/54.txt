uco

rahul bansal

epp practical

emerging programming paradigms

submitted to
submitted by

kanika mam
rahul bansal
uco

uco

rahul bansal

epp practical

write short notes on following
lean development
lean software development lsd is an agile framework based on optimizing
development time and resources eliminating waste and ultimately delivering only
what the product needs the lean approach is also often referred to as the minimum
viable product mvp strategy in which a team releases a bareminimum version of
its product to the market learns from users what they like dont like and want to be
added and then iterates based on this feedbacklean development methodology
principles can be applied in any it environment for improved programming practices
the practice is based on seven principles


waste elimination



amplifying learning



late decision making



fast delivery



team empowerment



builtin integrity



view applications as a whole

strengths delivered in less time eliminate unnecessary activity thus reduce costs
boosts morale of team

weakness not scalable as too dependent on team work depend on strong
documentation

 scrum
scrum is a process framework used to manage product development and other
knowledge work scrum is empirical in that it provides a means for teams to establish a
hypothesis of how they think something works try it out reflect on the experience and
make the appropriate adjustments that is when the framework is used properlyscrum is

uco

rahul bansal

epp practical

structured in a way that allows teams to incorporate practices from other frameworks
where they make sense for the teams context

applicablity scrum is best suited in the case where a cross functional team is
working in a product development setting where there is a non trivial amount of work that
lends itself to being split into more than one    week iteration

valuescommitment courage focus openness respect

principlestransparency inspection adaptation

rolesthe product owner
the scrum master
the development team

eventssprintthe sprint is a timebox of one month or less during which the team produces a
potentially shippable product increment

sprint planninga team starts out a sprint with a discussion to determine which items
from the product backlog they will work on during the sprint the end result of sprint
planning is the sprint backlog

daily scrumthe daily scrum is a short usually limited to  minutes discussion
where the team coordinates their activities for the following day the daily scrum is not
intended to be a status reporting meeting or a problem solving discussion

sprint reviewat the end of the sprint the entire team including product owner
reviews the results of the sprint with stakeholders of the product

sprint retrospectiveat the end of the sprint following the sprint review the team
including product owner should reflect upon how things went during the previous sprint
and identify adjustments they could make going forward

uco

rahul bansal

epp practical

 extreme programming xp
xp is a lightweight efficient lowrisk flexible predictable scientific and fun way to
develop a softwareextreme programming xp was conceived and developed to
address the specific needs of software development by small teams in the face of
vague and changing requirementsextreme programming is one of the agile software
development methodologies it provides values and principles to guide the team
behavior the team is expected to selforganize extreme programming provides
specific core practices where 


each practice is simple and selfcomplete



combination of practices produces more complex and emergent behavior

applicablity


dynamically changing software requirements



risks caused by fixed time projects using new technology



small colocated extended development team



the technology you are using allows for automated unit and functional tests

extreme programming involves 


writing unit tests before programming and keeping all of the tests running at all
times the unit tests are automated and eliminates defects early thus reducing
the costs



starting with a simple design just enough to code the features at hand and
redesigning when required



programming in pairs called pair programming with two programmers at one
screen taking turns to use the keyboard while one of them is at the keyboard
the other constantly reviews and provides inputs



integrating and testing the whole system several times a day



putting a minimal working system into the production quickly and upgrading it
whenever required



keeping the customer involved all the time and obtaining constant feedback

advantages
slipped schedules cancelled projects costs incurred in changes

values of xp
communication simplicity feedback courage respect

uco

rahul bansal

epp practical

 adaptive software development asd
adaptive software development has evolved from rad practices the team aspects
also were added to these practices companies from new zealand to canada for a
wide range of project and product types have used adaptive software development
adaptive software development is cyclical like the evolutionary model with the phase
names reflecting the unpredictability in the complex systems the phases in the
adaptive development life cycle are 

speculate the term plan is too deterministic and indicates a reasonably high
degree of certainty about the desired result the implicit and explicit goal of
conformance to plan restricts the managers ability to steer the project in innovative
directions

collaborate complex applications are not built they evolve complex
applications require that a large volume of information be collected analyzed and
applied to the problem turbulent environments have high rates of information flow
hence complex applications require that a large volume of information be collected
analyzed and applied to the problem

learn the learn part of the lifecycle is vital for the success of the project team
has to enhance their knowledge constantly using practices such as technical
reviews project retrospectives customer focus groups

strengths focused on the end users allows for ontime and even early delivery
encourages more transparency between developers and clients

weaknesses demands extensive user involvement integrates testing into every
stage emphasis on rapid iterating and continuous feedback can lead to scope creep

characteristics of asd






mission driven
component based
iterative
time boxed
change tolerant
risk driven

uco

rahul bansal

epp practical

 feature driven development
feature driven development fdd is an agile framework that as its name suggests
organizes software development around making progress on features features in the
fdd context though are not necessarily product features in the commonly
understood sense they are rather more akin to user stories in scrum in other
words complete the login process might be considered a feature in the feature
driven development fdd methodology
fdd was designed to follow a fivestep development process built largely around
discrete feature projects

developing an overall model  in the first stage the development team
members cooperate together to build an object model of the domain problem the
main goal is to propose a model for the domain area the chief architect follows them
and provides guidance

building a feature list after the development team built an object model then it
is time to identify the features that the user or client values these features are meant
to be the building barriers of the project that help the group members to navigate the
processes

planning by the feature the third stage turns around managing the features
and the way the development team tends to implement them as anticipated its
essential to consider the team workload risks as well as other important aspects in
order to prevent any kind of complex issues from arising

designing by the feature everything planned pretends design using the
knowledge from the first modeling process the chief programmer selects all the
features that the team should develop next and also identifies the domain classes

building by the feature the last step is to put all the necessary items into
action in order to support the design in other words once your team developed
tested and inspected the code it is time to start developing the software

strengthssimple fivestep process allows larger teams to move products
forwardleverages predefined development standards

weaknessesdoes not work efficiently for smaller projects less written
documentation highly dependent on lead developers or programmers

uco

rahul bansal

epp practical

