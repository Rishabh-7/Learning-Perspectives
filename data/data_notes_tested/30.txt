write short notes on the following 
lean development
lean development is the use of lean principles to software development lean principles originated in manufacturing to minimize waste and maximize value to the customer in the production line these two goals are also useful in software development which also follows an iterative process requires quality standards and relies on the collaboration of a set of team members

lean development is an agile framework that is based on minimizing development time and efforts eliminating waste and delivering only the product requirements it is often referred to as the minimum viable product mvp strategy in which a team
 releases an mvp to the market
 learns from users what they like dont like and want to be added
 iterates based on this feedback
the seven lean principles are
   oo 
   eliminate waste lean philosophy regards everything not adding value to the customer as waste
   oo 
   build quality in efficient quality management using tdd continuous integration pair programming
   oo 
   create knowledge learning is amplified through ample code reviewing meetings and establishment of metrics
   oo 
   defer commitment decide as late as possible and schedule irreversible decisions for the last responsible moment
   oo 
   deliver fast deliver as fast as possible the sooner the end product is delivered without major defects the sooner feedback can be received
   oo 
   respect people empowering team members to make important development decisions based on knowledge they receive whilst writing code and their own judgment
   oo 
   optimize the whole lean software development focuses on optimising the value stream as a whole

when to use lean development

it is successful when we require streamlining of the process and eliminating any activity not useful for the final product


extreme programming
extreme programming is an agile software development methodology that is primarily used to improve the quality of software and allow proper adaptation of the software to the changing needs of the client
extreme programming aims to provide iterative small releases throughout the project allowing the team members and clients to review and learn from the projects progress throughout the entire software development life cycle

extreme programming rules are based on these simple  values
 simplicity developers write simple code to add more value to a product which in turn helps save time and efforts
 communication everyone on a team works jointly at every stage of the project from gathering requirements to implementing code and getting feedback
 respect every person assigned to a project contributes to a common goal
 feedback team members deliver software frequently in order to get feedback about it and make necessary improvements according to the new client requirements
 courage team members take full responsibility for their work and are always ready to respond to changes and suggest improvements
common xp practices
       pair programming this practice involves two programmers working jointly on the same code it results in high quality software in spite of increased time required
       test driven development in this approach each piece of code must pass the test to be released this allows programmers to use immediate feedback and improve their code
       continuous integration team members commit code multiple times in a day enabling continuous improvement and delivery
       the planning game at the beginning of the cycle the team members and the customer discuss product features and requirements
       onsite customer the end customer should fully participate in development to answer team questions and set priorities
       code refactoring it involves removing redundancy and eliminating unnecessary code
      when to use xp

      xp should be used when you expect experience constantly changing requirements or work with customers who arent sure what they want the system to do also it is successful when you want to mitigate project risk especially around tight deadlines

      

adaptive software development
adaptive software development is an outgrowth of rapid software development  it focuses on rapid creation and development of softwares it helps teams to quickly adapt to changing requirements or market needs by continuous planning and learning 
the process involves  phases
 speculate
 collaborate
 learn
it replaces the traditional waterfall cycle with a repeating cycle of speculate collaborate and learn the characteristics of asd is that it is mission focused feature based iterative timeboxed risk driven and change tolerant
the focus of adaptive software development is in the computer code instead of planning the software out beforehand developers have a basic idea in their heads and they go to work if there is any change or adaptation the coders work on it based on their learnings
the relatively short cycle of development leads to overall quick addition of new features and delivery of the end product
when to use asd
asd is a useful methodology when your organization prioritizes rapid delivery of products and sees value in continuously evolving the requirements but if you do not support close involvement with your clients or continuous testing for your code then it is not a viable solution

feature driven development
feature driven development methodology is an agile development methodology that is customercentric iterative and incremental it is known for short iterations and frequent releases of the software it is a featurefocused method ie it allows the project to be divided into features that are small pieces of the complete project
 main activities of fdd
          develop a model  the overall model is by identifying the scope of the system domain models are developed by the chief architect and other team members
          build a list of features a feature is a client valued output each feature is delivered within  weeks therefore each feature should be manageable within that time
          plan out each feature  features are planned and assigned on the basis of how long they take to create and how important they are to the client
          design each feature the domain classes sequence diagrams and general designs of each feature are inspected and finalized
          build each feature after the design is inspected and improved the code is written unit tested and the completed feature is added to the project

when to use fdd
fdd approach is suitable for long term complex projects it is scalable and delivers fast results
